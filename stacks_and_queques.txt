EXERCISES

1. A stack operates on the LIFO principle, where a queque operates on the
FIFO principle. A stack can take advantage of the push and pop methods. 

2. Both stacks and queques are a way of taking data input and prioritizing its
output, one handles the last input first, where the other handles the first input
first.

3. For an UNDO function a stack or LIFO would be best as this would redact
the most recent input. Similarly a stack or LIFO would work for a re-do function. 
Consider the stack of plates being washed in a cafeteria line, the last plate washed is the first to go out, 
then the next most recent, but the orders on the plates were wrong and the customers move
backward (REDO) in line to have their order fixed. In the Microsoft word example the 
first UNDO will be the last to be REDONE and the last or most recent UNDO will be the first REDO.


PROGRAMMING QUESTIONS

1.

var word = 'String'


let stack = (string) =>{
  var temp = [];
  var reverse = "";

  for (i=0; i<string.length; i++){
    temp.unshift(string[i]);
    
  }
  
  console.log(temp)
  reverse += temp.join('');
  console.log(reverse)
}

stack(word);



2. 

var word = 'String'


let stack = (string) =>{
  var temp = [];

  for (i=0; i<string.length; i++){
    temp.push(string[i]);
  }
  console.log(temp)
  
  var reverse = "";
  for (i=temp.length-1; i>=0 ; i--){
   reverse += temp.pop();    
  }


  console.log(reverse)
}

stack(word);


3. 

var word = 'String'


function enque (string){
  temp = [];
  

  for (i=0; i<string.length; i++){
    temp.unshift(string[i]); 
  }
   console.log(temp)
}

function deque (enque){

   for (i=temp.length-1; i>=0 ; i--){
   console.log(temp.pop([i]));    
  }

}


deque(enque(word));


